@model System.Collections.Generic.List<Inventario_Productos_Tecnologicos.Models.TECO_A_Producto>

<div class="List-header">
    <div class="List-title">
        <h2>@ViewBag.ListTitle</h2>
    </div>
    <div class="List-controls-Container">
        <button class="ListLastElement">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        </button>
        <button class="ListNextElement">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
        </button>
    </div>
</div>
<div class="ListArticlesContainer">
    @foreach (var prod in Model)
    {
        @await Component.InvokeAsync("ProductCard", new { productId = @prod.TN_Id })
        ;
    }
    <article class="card-producto-last-item">
        <h2 class="card-producto-last-item-title">
            Ver todos
        </h2>
    </article>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        console.log("Entra a las listas")
        const listContainer = document.querySelector('.ListArticlesContainer');
        const prevBtn = document.querySelector('.ListLastElement');
        const nextBtn = document.querySelector('.ListNextElement');
        if (prevBtn && listContainer && nextBtn) {
            console.log("Si existen los 3 elementos");
            //Calculo del tamaño del desplazamiento
            const itemWidth = 250;
            const gapwidth = parseFloat(getComputedStyle(listContainer).gap);
            //Si el gap nop está definido se agrega
            const scrollAmount = itemWidth + (isNaN(gapwidth) ? 16 : gapwidth);
            console.log(scrollAmount);

            function scrollList(direccion) {
                if (direccion === 'prev') {
                    console.log("Anterior elemento");
                    listContainer.scrollBy({
                        left: -scrollAmount,
                        behavior: 'smooth'
                    });
                } else if (direccion === 'next') {
                    console.log("Siguiente elemento");
                    listContainer.scrollBy({
                        left: scrollAmount,
                        behavior: 'smooth'
                    });
                }
            }

            //Se añaden los eventos a los botones de scroll
            prevBtn.addEventListener('click', () => {
                scrollList('prev')
            });
            nextBtn.addEventListener('click', () => {
                scrollList('next')
            });

            //Función que activa o desactiva los botones en función de si este llega a los extremos
            function checkScrollPosition() {
                //Desabilita el botón "Anterior" en caso de que este en el inicio
                prevBtn.disabled = listContainer.scrollLeft <= 5
                //Deshabilita el botón "Siguiente" si está al final
                //Scrollwidth = ancho del contenido
                //clienwidth = ancho visible del contenedor
                nextBtn.disabled = (listContainer.scrollLeft + listContainer.clientWidth) >= (listContainer.scrollWidth - 5);
            }

            //Revisamos la posición inicial
            checkScrollPosition()
            //Añadimos el la función al evento scroll de la lista
            listContainer.addEventListener('scroll', checkScrollPosition)
        }
    });
</script>